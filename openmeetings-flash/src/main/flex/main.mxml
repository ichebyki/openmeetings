<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.

-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		width="570" height="900" pageTitle="Openmeetings" fontSize="12" focusEnabled="true"
		applicationComplete="appInit(event)" uncaughtError="uncaughtError(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:TraceTarget/>
	</fx:Declarations>
	<fx:Script><![CDATA[
		import mx.core.FlexGlobals;
		import mx.graphics.SolidColor;
		import mx.utils.UIDUtil;

		import flash.desktop.Clipboard;
		import flash.desktop.ClipboardFormats;
		import flash.events.ContextMenuEvent;
		import flash.events.MouseEvent;
		import flash.events.KeyboardEvent;
		import flash.ui.ContextMenu;

		import org.apache.openmeetings.OmVideo;

		private var audioOnly:Boolean = false;
		private var FPS:int;
		private var bandwidth:int = 0;
		private var quality:int = 100;
		private var echoPath:int = 256;
		private var echoSuppression:Boolean = true;
		private var micRate:int = 22;//5, 8, 11, 22, and 44
		private var selectedMic:int = -1;
		private var selectedCam:int = -1;
		private var video:OmVideo;
		private var recName:String;
		private var mic:Microphone = null;
		private var activities:Array = [];
		private var rights:Array = [];
		private var activityTimer:Timer = new Timer(100);
		private var active:Boolean = false;
		private var userId:String = null;
		private var cuid:String = null;
		private var type:String = null;
		private var params:Object;
		private var copyPasteCtxMenu:ContextMenu = new ContextMenu();
		private var muted:Boolean = false;

		[Bindable]
		private var interview:Boolean = false;
		[Embed(source="assets/micro.png")]
		[Bindable]
		public var micImgCls:Class;
		[Embed(source="assets/cursor.png")]
		[Bindable]
		public var cursorImgCls:Class;
		[Bindable]
		private var exclusiveTitle:String;

		private function debug(...rest):void {
			if ('true' === params.debug) {
				ExternalInterface.call("console.log", rest);
			}
		}

		private function camAvail():Boolean {
			return !audioOnly && Camera.names.length > 0;
		}

		private function micAvail():Boolean {
			return Microphone.names.length > 0;
		}

		private function _hasAudio(act:Array):Boolean {
			return act.indexOf('broadcastA') > -1;
		}

		private function hasAudio():Boolean {
			return _hasAudio(activities);
		}

		private function _hasVideo(act:Array):Boolean {
			return act.indexOf('broadcastV') > -1;
		}

		private function hasVideo():Boolean {
			return _hasVideo(activities);
		}

		private function hasRightRemoteControl():Boolean {
			return rights.indexOf('remoteControl') > -1 || rights.indexOf('moderator') > -1 || rights.indexOf('superModerator') > -1;
		}

		private function hasRightExclusive():Boolean {
			return rights.indexOf('exclusive') > -1 || rights.indexOf('moderator') > -1 || rights.indexOf('superModerator') > -1;
		}

		private function getIntParam(param:String, def:int):int {
			var val:int = parseInt(param);
			return (isNaN(val) || val < 1 ? def : val);
		}

		private function appInit(evt:Event):void {
			this.params = FlexGlobals.topLevelApplication.parameters;
			debug("appInit()", params);
			audioOnly = 'true' == params.audioOnly;
			interview = 'true' == params.interview;
			exclusiveTitle = params.exclusiveTitle;
			FPS = getIntParam("fps", 30);
			bandwidth = getIntParam(params.bandwidth, 0);
			quality = getIntParam(params.quality, 90);
			echoPath = getIntParam(params.echoPath, 128);
			micRate = getIntParam(params.micRate, 22);
			video = new OmVideo(videoDisplay, params, setCursor);
			activities = params.av == null ? [] : params.av.split(',');
			rights = params.rights == null ? [] : params.rights.split(',');
			userId = params.userId;
			cuid = params.cuid;
			type = params.type;
			ExternalInterface.addCallback("vidResize", vidResize);
			switch (params.mode) {
				case 'settings': {
					ExternalInterface.addCallback("getDevices", function ():Object {
						return {
							cams: Camera.names
							, mics: Microphone.names
						};
					});
					ExternalInterface.addCallback("camChanged", function (val:int):void {
						selectedCam = val;
						camChanged(null);
					});
					ExternalInterface.addCallback("micChanged", function (val:int):void {
						selectedMic = val;
						camChanged(null);
					});
					ExternalInterface.addCallback("resChanged", function (width:int, height:int):void {
						setResolution(width, height, true);
					});
					ExternalInterface.addCallback("close", cleanupCallback);
					ExternalInterface.addCallback("init", function (camIdx:int, micIdx:int, width:int, height:int):void {
						selectedCam = camIdx;
						selectedMic = micIdx;
						setResolution(width, height, true);
					});
					ExternalInterface.addCallback("startRec", function ():void {
						startTestRecording();
					});
					ExternalInterface.addCallback("play", function ():void {
						playTestRecording();
					});
					ExternalInterface.call("VideoSettings.initSwf");
				}
					break;
				case OmVideo.BROADCAST: {
					selectedCam = params.cam;
					selectedMic = params.mic;
					_resize(Math.max(300, params.width), Math.max(200, params.height));
					ExternalInterface.addCallback("setVolume", function (vol:int):void {
						if (hasAudio()) {
							video.setVolume(vol);
						}
					});
					ExternalInterface.addCallback("setRights", setRightsCallback);
					ExternalInterface.addCallback("cleanup", cleanupCallback);
					video.connect(function ():void {
						// trust no-one
						video.getNc().call("check", new Responder(function (check:Object):void {
							debug("check", check);
							audioOnly = check.audioOnly;
							activities = check.activities;
							interview = 'interview' == check.roomType;
							checkAvPermissions(function ():void {
								muted = false;
								// trust no-one
								video.getNc().call("check", new Responder(function (check:Object):void {
									debug("check", check);
									activities = check.activities;
									addImage(params.width, params.height);
									_resize(params.width, params.height);
									_updateExclusive();
									activityTimer.addEventListener(TimerEvent.TIMER, broadcastTimerListener);
									refreshBroadcast(null);
									ExternalInterface.call("VideoManager.swfLoaded", params.uid);
									ExternalInterface.addCallback("refresh", refreshBroadcast);
									ExternalInterface.addCallback("update", function ():void {
										video.getNc().call("check", new Responder(function (check:Object):void {
											debug("check", check);
											var pVideo:Boolean = hasVideo(), nVideo:Boolean = _hasVideo(check.activities)
													, pAudio:Boolean = hasAudio(), nAudio:Boolean = _hasAudio(check.activities);
											if (nVideo != pVideo || nAudio != pAudio) {
												// activities are changed
												activities = check.activities;
												if (nVideo && pVideo) {
													nAudio ? video.unmute() : video.mute();
													if (mic != null) {
														activityTimer.start();
													} else {
														activityTimer.stop();
													}
												} else {
													refreshBroadcast(null);
												}
											}
											_updateExclusive();
											//debug("Client updated: ", c);
										}));
									});
								}));
							});
						}))
					});
				}
					break;
				case OmVideo.PLAY: {
					addImage(params.width, params.height);
					_resize(params.width, params.height);
					refreshCallback(null);
					_updateExclusive();
					_updateRemote();
					ExternalInterface.addCallback("setVolume", function (vol:int):void {
						video.setStreamVolume(vol);
					});
					ExternalInterface.addCallback("update", function (c:Object):void {
						debug("update Callback", c.activities);
						activities = c.activities;
						_updateExclusive();
					});
					ExternalInterface.addCallback("refresh", refreshCallback);
					ExternalInterface.addCallback("setRights", setRightsCallback);
					ExternalInterface.addCallback("cleanup", cleanupCallback);
					ExternalInterface.call("VideoManager.swfLoaded", params.uid);
					copyPasteCtxMenu.clipboardMenu = true;
				}
					break;
			}
		}

		private function _updateExclusive():void {
			debug("_updateExclusive", rights, activities);
			removeEventListener(MouseEvent.MOUSE_OUT, exclMouseOutHandler);
			removeEventListener(MouseEvent.MOUSE_OVER, exclMouseOverHandler);
			removeEventListener(MouseEvent.CLICK, exclMouseClickHandler);
			if (hasAudio() && hasRightExclusive()) {
				addEventListener(MouseEvent.MOUSE_OUT, exclMouseOutHandler);
				addEventListener(MouseEvent.MOUSE_OVER, exclMouseOverHandler);
				addEventListener(MouseEvent.CLICK, exclMouseClickHandler);
			}
		}

		private function exclMouseOutHandler(evt:MouseEvent):void {
			exclusiveMic.visible = false;
		}

		private function exclMouseOverHandler(evt:MouseEvent):void {
			exclusiveMic.visible = true;
		}

		private function exclMouseClickHandler(evt:MouseEvent):void {
			ExternalInterface.call("VideoManager.clickExclusive", cuid);
		}

		private function _updateRemote():void {
			removeEventListener(MouseEvent.MOUSE_DOWN, remoteMouseDownHandler);
			removeEventListener(MouseEvent.MOUSE_UP, remoteMouseUpHandler);
			removeEventListener(MouseEvent.MOUSE_MOVE, remoteMouseMoveHandler);
			this.removeEventListener(KeyboardEvent.KEY_DOWN, remoteKeyDownHandler);
			this.removeEventListener(Event.COPY, copyHandler);
			this.removeEventListener(Event.PASTE, pasteHandler);
			copyPasteCtxMenu.removeEventListener(ContextMenuEvent.MENU_SELECT, menuSelectHandler);
			this.contextMenu = null;
			if ("sharing" === type && hasRightRemoteControl()) {
				fakeTa.text = "";
				fakeTa.setFocus();
				addEventListener(MouseEvent.MOUSE_DOWN, remoteMouseDownHandler);
				addEventListener(MouseEvent.MOUSE_UP, remoteMouseUpHandler);
				addEventListener(MouseEvent.MOUSE_MOVE, remoteMouseMoveHandler);
				this.addEventListener(KeyboardEvent.KEY_DOWN, remoteKeyDownHandler, false, 0, true);
				this.addEventListener(Event.COPY, copyHandler);
				this.addEventListener(Event.PASTE, pasteHandler);
				copyPasteCtxMenu.addEventListener(ContextMenuEvent.MENU_SELECT, menuSelectHandler);
				this.contextMenu = copyPasteCtxMenu;
			}
		}

		private function remoteMouseDownHandler(evt:MouseEvent):void {
			fakeTa.text = "";
			fakeTa.setFocus();
			video.getNc().call(
				"sendRemoteCursorEvent"
				, new Responder(function (res:Object):void {})
				, params.uid, {
					action: 'mouseDown'
					, x: evt.stageX / video.zoomX()
					, y: evt.stageY / video.zoomY()
					, alt: evt.altKey
					, ctrl: evt.ctrlKey
					, shift: evt.shiftKey
				});
		}

		private function remoteMouseUpHandler(evt:MouseEvent):void {
			video.getNc().call(
				"sendRemoteCursorEvent"
				, new Responder(function (res:Object):void {})
				, params.uid, {
					action: 'mouseUp'
					, x: evt.stageX / video.zoomX()
					, y: evt.stageY / video.zoomY()
					, alt: evt.altKey
					, ctrl: evt.ctrlKey
					, shift: evt.shiftKey
				});
		}

		private function remoteMouseMoveHandler(evt:MouseEvent):void {
			video.getNc().call(
				"sendRemoteCursorEvent"
				, new Responder(function (res:Object):void {})
				, params.uid, {
					action: 'mousePos'
					, x: evt.stageX / video.zoomX()
					, y: evt.stageY / video.zoomY()
				});
		}

		private function remoteKeyDownHandler(evt:KeyboardEvent):void {
			video.getNc().call(
				"sendRemoteCursorEvent"
				, new Responder(function (res:Object):void {})
				, params.uid, {
					action: evt.type
					, alt: evt.altKey
					, ctrl: evt.ctrlKey
					, shift: evt.shiftKey
					, char: evt.charCode
					, key: evt.keyCode
				});
		}

		private function menuSelectHandler(event:ContextMenuEvent):void {
			event.contextMenuOwner.contextMenu.clipboardItems.copy = true;
			event.contextMenuOwner.contextMenu.clipboardItems.paste = true;
		}

		private function copyHandler(e:Event):void {
			video.getNc().call(
				"sendRemoteCursorEvent"
				, new Responder(function (res:Object):void {})
				, params.uid, {
					action: "copy"
					, uid: params.selfUid
				});
		}

		private function pasteHandler(e:Event):void {
			if (Clipboard.generalClipboard.hasFormat(ClipboardFormats.TEXT_FORMAT)) {
				var data:String = Clipboard.generalClipboard.getData(ClipboardFormats.TEXT_FORMAT) as String;
				video.getNc().call(
					"sendRemoteCursorEvent"
					, new Responder(function (res:Object):void {})
					, params.uid, {
						action: "paste"
						, paste: data
					});
			}
		}

		private function _resize(_width:int, _height:int):void {
			userImage.width = _width;
			userImage.height = _height;
			exclusiveMic.x = (_width - exclusiveMic.width) / 2;
			exclusiveMic.y = (_height - exclusiveMic.height) / 2;
			video.resize(_width, _height);
		}

		private function vidResize(_width:int, _height:int):void {
			debug("vidResize", _width, _height);
			var w:Number = _width, h:Number = _height;
//			if (!muted) {
//				var ratio:Number = params.width / params.height;
//				var nh:int = Math.ceil(_width / ratio);
//				if (nh > _height) {
//					w = Math.ceil(ratio * _height);
//					h = _height;
//				} else {
//					w = _width;
//					h = nh;
//				}
//				debug("vidResize:: " + _width + "x" + _height + "->" + w + "x" + h);
//			}
			_resize(w, h);
			video.vidResize(w, h);
		}

		private function refreshBroadcast(opts:Object):void {
			debug("refreshBroadcast", opts);
			if (opts && !isNaN(opts.width)) {
				selectedCam = opts.cam;
				selectedMic = opts.mic;
				var width:int = isNaN(video.width) ? opts.width : video.width
					, height:int = isNaN(video.height) ? opts.height : video.height;
				vidResize(width, height);
			}
			video.reset();
			activityTimer.stop();
			var broadcastId:String = UIDUtil.createUID();
			debug("BroadcastId = " + broadcastId);
			mic = getMic();
			if (mic != null) {
				volumeRect.visible = true;
				volumeRect.fill = new SolidColor(0x00FF00);
				activityTimer.start();
			}
			video.broadcast(broadcastId, hasVideo() ? getCam() : null, mic);
			if (!hasAudio()) {
				video.mute();
			} else {
				video.resetVolume();
			}
		}

		private function setRightsCallback(_rights:Array):void {
			debug("setRightsCallback", _rights);
			rights = _rights;
			_updateExclusive();
			_updateRemote();
		}

		private function cleanupCallback():void {
			debug("cleanupCallback");
			video.reset();
		}

		private function refreshCallback(opts:Object):void {
			video.reset();
			video.play(params.broadcastId); // TODO audio/video
			video.resetStreamVolume();
		}

		private function addImage(_width:int, _height:int):void {
			userImage.source = 'profile/' + userId + '?anti=' + new Date().time;
			userImage.visible = true;
		}

		private function uncaughtError(e:UncaughtErrorEvent):void {
			debug("Unexpected ERROR", e);
		}

		private function getMic():Microphone {
			debug("Entering getMic ...");
			var _micro:Microphone = null;
			if (selectedMic > -1) {
				_micro = echoPath == 0 ? Microphone.getMicrophone(selectedMic) : Microphone.getEnhancedMicrophone(selectedMic);

				if (_micro != null) {
					if (echoPath == 256) {
						var options:MicrophoneEnhancedOptions = new MicrophoneEnhancedOptions();
						options.mode = MicrophoneEnhancedMode.FULL_DUPLEX;
						options.echoPath = echoPath;
						options.nonLinearProcessing = true;
						_micro.enhancedOptions = options;
						debug("echoPath set to " + echoPath + ", " + _micro.enhancedOptions);
					}
					_micro.codec = SoundCodec.NELLYMOSER;
					_micro.framesPerPacket = 1;
					_micro.setSilenceLevel(0, 2000);
					debug("canvas.micRate: " + micRate);
					_micro.rate = micRate;
					_micro.gain = 50;
					// this has no effect if enhanced microphone is obtained
					//Microphone setUseEchoSupression(bool)
					debug("canvas.echoSuppression: " + echoSuppression);
					_micro.setUseEchoSuppression(echoSuppression);
				}
				debug("... getMic DONE" + _micro);
			}
			return _micro;
		}

		private function getCam():Camera {
			debug("Entering getCam ..." + video.width + ", " + params.width);
			var _camera:Camera = null;
			if (selectedCam > -1) {
				_camera = Camera.getCamera("" + selectedCam);
				if (_camera != null && !_camera.muted) {
					//FIXME need to be unified
					_camera.setMode(video.width, video.height, FPS);
					if (interview) {
						//we need a fixed frame rate for the videos to merge them later on
						debug("IS INTERVIEW ");
						_camera.setQuality(0, 98);
					} else {
						debug("IS NO INTERVIEW ");
						_camera.setQuality(bandwidth, quality);
					}
				}
				debug("... getCam DONE " + _camera);
			}
			return _camera;
		}

		private function checkAvPermissions(callback:Function):void {
			debug("Camera selected:: " + selectedCam);
			var cam:Camera = getCam();
			debug("Camera selected:: " + cam, cam == null ? '' : cam.muted);
			if (cam != null) {
				if (cam.muted) {
					muted = true;
					debug("Camera Muted");
					if (params.mode != 'settings') {
						ExternalInterface.call("VideoManager.securityMode", params.uid);
					}
					video.attachCamera(cam);
					cam.addEventListener(StatusEvent.STATUS, function (event:StatusEvent):void {
						debug("cameraStatusHandler! " + event);
						cam.removeEventListener(StatusEvent.STATUS, arguments.callee);
						switch (event.code) {
							case 'Camera.Muted':
								debug("Unable to connect to active camera.");
								break;
							case 'Camera.Unmuted':
								ExternalInterface.call("VideoSettings.allowRec", true);
								callback();
								break;
						}
					});
				} else {
					callback();
				}
			} else {
				var _mic:Microphone = getMic();
				if (_mic != null) {
					if (_mic.muted) {
						muted = true;
						debug("Mic Muted");
						ExternalInterface.call("VideoManager.securityMode", params.uid);
						var nc:NetConnection = new NetConnection();
						nc.connect(null);
						var ns:NetStream = new NetStream(nc);
						ns.attachAudio(_mic);
						_mic.addEventListener(StatusEvent.STATUS, function (event:StatusEvent):void {
							debug("micStatusHandler! " + event);
							_mic.removeEventListener(StatusEvent.STATUS, arguments.callee);
							ns.close();
							nc.close();
							if (_mic.muted) {
								debug("Unable to connect to active microphone.");
							} else {
								ExternalInterface.call("VideoSettings.allowRec", true);
								callback();
							}
						});
					} else {
						callback();
					}
				}
			}
		}

		private function _attachCamera(cam:Camera):void {
			debug("_attachCamera():: muted ? " + (cam == null ? '' : cam.muted));
			if (cam != null && cam.muted) {
				debug("Unable to connect to active camera.");
			} else {
				try {
					video.reset();
					video.attachCamera(cam);
					debug("_attachCamera()::done");
				} catch (error:Error) {
					debug("_attach:: " + error.message + "\n" + error.getStackTrace());
				}
			}
		}

		private function settingsCameraCallback():void {
			muted = false;
			ExternalInterface.call("VideoSettings.allowRec", true);
			_attachCamera(getCam());
		}

		private function setResolution(w:int, h:int, attach:Boolean):void {
			var width:int = w, height:int = h;
			debug("onselect WxH :: " + width + "x" + height);
			video.resize(width, height);
			if (attach) {
				checkAvPermissions(settingsCameraCallback);
			}
		}

		private function camChanged(e:Event):void {
			debug("camChanged");
			checkAvPermissions(settingsCameraCallback);
		}

		private function playTestRecording():void {
			video.play(recName + ".flv");
		}

		private function testTimerListener(event:TimerEvent):void {
			ExternalInterface.call("VideoSettings.micActivity", mic.activityLevel);
		}

		private function broadcastTimerListener(event:TimerEvent):void {
			var _active:Boolean = mic.activityLevel > 8;
			var h:int = video.height - 10;
			var ah:int = Math.round(mic.activityLevel * h / 100);
			volumeRect.y = 5 + h - ah;
			volumeRect.height = ah;
			if (active !== _active) {
				active = _active;
				ExternalInterface.call("VideoManager.micActivity", active);
			}
		}

		private function startTestRecording():void {
			try {
				var counter:int = 5;
				timerText.visible = true;
				timerText.text = "5 sec";
				var recTimer:Timer = new Timer(1000, counter);
				var t:Date = new Date();
				recName = "TEST_SETUP_" + t.getTime();
				mic = getMic();
				activityTimer.addEventListener(TimerEvent.TIMER, testTimerListener);
				video.record(recName, getCam(), mic, function ():void {
					if (mic != null) {
						activityTimer.start();
					}
					recTimer.addEventListener(TimerEvent.TIMER, function (event:TimerEvent):void {
						timerText.text = --counter + " sec";
						if (counter == 0) {
							timerText.visible = false;
							ExternalInterface.call("VideoSettings.allowPlay");
							playTestRecording();
							activityTimer.stop();
							activityTimer.removeEventListener(TimerEvent.TIMER, testTimerListener);
							mic = null;
						}
					});
					recTimer.start();
				});
			} catch (err:Error) {
				debug("ERROR: " + err);
			}
		}

		public function setCursor(x:int, y:int):void {
			cursor.visible = true;
			cursor.x = x;
			cursor.y = y;
		}
	]]></fx:Script>

	<s:TextArea id="fakeTa" width="1" height="1" editable="true"/>
	<s:Image id="userImage" visible="false" width="0" height="0" />
	<mx:UIComponent id="videoDisplay" width="0" height="0" />
	<s:Rect id="volumeRect" x="5" y="5" width="10" height="100" visible="false" />
	<s:Image id="exclusiveMic" source="{micImgCls}" toolTip="{exclusiveTitle}" visible="false"/>
	<s:Label id="timerText" height="20" width="45" x="20" y="5" paddingLeft="5" paddingTop="5"
			 visible="false" backgroundColor="0xf5f5f5" fontWeight="bold"><s:text></s:text></s:Label>
	<s:Image id="cursor" source="{cursorImgCls}" visible="false"/>
</s:Application>
